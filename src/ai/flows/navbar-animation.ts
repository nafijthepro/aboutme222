// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview Generates a dynamic dot animation description for the navbar.
 *
 * - generateNavbarAnimation - A function that generates the navbar animation description.
 * - NavbarAnimationInput - The input type for the generateNavbarAnimation function.
 * - NavbarAnimationOutput - The return type for the generateNavbarAnimation function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const NavbarAnimationInputSchema = z.object({
  personality: z
    .string()
    .describe('A description of the portfolio owner\'s personality and coding style.'),
});
export type NavbarAnimationInput = z.infer<typeof NavbarAnimationInputSchema>;

const NavbarAnimationOutputSchema = z.object({
  animationDescription: z
    .string()
    .describe('A detailed CSS animation description that reflects the given personality.'),
});
export type NavbarAnimationOutput = z.infer<typeof NavbarAnimationOutputSchema>;

export async function generateNavbarAnimation(
  input: NavbarAnimationInput
): Promise<NavbarAnimationOutput> {
  return navbarAnimationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'navbarAnimationPrompt',
  input: {schema: NavbarAnimationInputSchema},
  output: {schema: NavbarAnimationOutputSchema},
  prompt: `You are an expert CSS animation generator who specializes in creating unique and engaging animations.

  Based on the following personality and coding style, generate a CSS animation description for the dot in the NAFIJ. title.

  Personality and Coding Style: {{{personality}}}

  The animation should be subtle, reflecting the personality, and visually appealing.

  Focus on describing the animation in terms of CSS properties such as color, size, position, and timing.
  Ensure the description can be directly translated to CSS code.
  Be creative and original. 
  `,
});

const navbarAnimationFlow = ai.defineFlow(
  {
    name: 'navbarAnimationFlow',
    inputSchema: NavbarAnimationInputSchema,
    outputSchema: NavbarAnimationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
